{"version":3,"sources":["api.tsx","useSunsetData.ts","usePosition.ts","App.tsx","index.tsx"],"names":["mapResponseData","sunrise","sunset","solar_noon","day_length","civil_twilight_begin","civil_twilight_end","nautical_twilight_begin","nautical_twilight_end","astronomical_twilight_begin","astronomical_twilight_end","Date","getSunsetData","position","a","latitude","coords","longitude","Error","fetch","response","json","sunsetResponse","status","results","useSunsetData","useState","data","setData","isFetched","setFetched","setPosition","useEffect","navigator","geolocation","getCurrentPosition","currentLocation","usePosition","sunsetData","fetchSunTime","App","className","role","aria-label","toLocaleTimeString","renderData","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAEMA,EAAkB,SAAC,GAWc,IAVrCC,EAUoC,EAVpCA,QACAC,EASoC,EATpCA,OACAC,EAQoC,EARpCA,WACAC,EAOoC,EAPpCA,WACAC,EAMoC,EANpCA,qBACAC,EAKoC,EALpCA,mBACAC,EAIoC,EAJpCA,wBACAC,EAGoC,EAHpCA,sBACAC,EAEoC,EAFpCA,4BACAC,EACoC,EADpCA,0BAEA,MAAO,CACLP,aACAC,aACAH,QAAS,IAAIU,KAAKV,GAClBC,OAAQ,IAAIS,KAAKT,GACjBG,qBAAsB,IAAIM,KAAKN,GAC/BC,mBAAoB,IAAIK,KAAKL,GAC7BC,wBAAyB,IAAII,KAAKJ,GAClCC,sBAAuB,IAAIG,KAAKH,GAChCC,4BAA6B,IAAIE,KAAKF,GACtCC,0BAA2B,IAAIC,KAAKD,KAI3BE,EAAa,uCAAG,WAC3BC,GAD2B,qBAAAC,EAAA,yDAGrBC,EAHqB,OAGVF,QAHU,IAGVA,OAHU,EAGVA,EAAUG,OAAOD,SAC5BE,EAJqB,OAITJ,QAJS,IAITA,OAJS,EAITA,EAAUG,OAAOC,UAE9BF,GAAaE,EANS,sBAOnB,IAAIC,MAAM,iCAPS,uBAUJC,MAAM,uDAAD,OAC6BJ,EAD7B,uBAC6CF,QAD7C,IAC6CA,OAD7C,EAC6CA,EAAUG,OAAOC,YAX/D,cAUrBG,EAVqB,gBAaGA,EAASC,OAbZ,UAeG,QAFxBC,EAbqB,QAeRC,OAfQ,uBAgBnB,IAAIL,MACR,6CAA+CI,EAAeC,QAjBvC,iCAqBpBvB,EAAgBsB,EAAeE,UArBX,4CAAH,sDCvBX,SAASC,IAIrB,IAAD,EACwBC,qBADxB,mBACOC,EADP,KACaC,EADb,OAEgCF,oBAAS,GAFzC,mBAEOG,EAFP,KAEkBC,EAFlB,OCPa,WAAwB,IAAD,EACJJ,qBADI,mBAC7Bb,EAD6B,KACnBkB,EADmB,KAUpC,OARAC,qBAAU,WACIC,UAAUC,YAElBC,oBAAmB,SAACC,GACtBL,EAAYK,QAEb,IAEI,CAACvB,GDAWwB,GAAZxB,EAHP,gEAKA,WAA4BuB,GAA5B,eAAAtB,EAAA,sEAEIgB,GAAW,GAFf,SAI6BlB,EAAcwB,GAJ3C,OAIUE,EAJV,OAMIV,EAAQU,GANZ,uBAQIR,GAAW,GARf,wEALA,sBAwBA,OAPAE,qBAAU,WACHnB,GAlBP,oCAqBE0B,CAAa1B,KACZ,CAACA,IAEG,CAACc,EAAME,EAAWhB,GEOZ2B,MAnCf,WAAgB,IAAD,EACuBf,IADvB,mBACNE,EADM,KACAE,EADA,KACWhB,EADX,KAwBb,OACE,yBAAK4B,UAAU,OACb,4BAAQA,UAAU,eACd5B,GAAY,+DACbgB,GAAa,0CACbF,GA1BY,SAACW,GAA4B,IACtCrC,EAAoBqC,EAApBrC,QAASC,EAAWoC,EAAXpC,OAEjB,OACE,oCACE,2BACE,0BAAMwC,KAAK,MAAMC,aAAW,WAA5B,gBADF,YAIY1C,EAAQ2C,qBAAsB,KAE1C,2BACE,0BAAMF,KAAK,MAAMC,aAAW,UAA5B,gBADF,WAIWzC,EAAO0C,qBAAsB,MAW/BC,CAAWlB,MC7B5BmB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.f51e7107.chunk.js","sourcesContent":["import { SunsetResponse, SunsetData, SunsetResponseData } from \"./types\";\n\nconst mapResponseData = ({\n  sunrise,\n  sunset,\n  solar_noon,\n  day_length,\n  civil_twilight_begin,\n  civil_twilight_end,\n  nautical_twilight_begin,\n  nautical_twilight_end,\n  astronomical_twilight_begin,\n  astronomical_twilight_end,\n}: SunsetResponseData): SunsetData => {\n  return {\n    solar_noon,\n    day_length,\n    sunrise: new Date(sunrise),\n    sunset: new Date(sunset),\n    civil_twilight_begin: new Date(civil_twilight_begin),\n    civil_twilight_end: new Date(civil_twilight_end),\n    nautical_twilight_begin: new Date(nautical_twilight_begin),\n    nautical_twilight_end: new Date(nautical_twilight_end),\n    astronomical_twilight_begin: new Date(astronomical_twilight_begin),\n    astronomical_twilight_end: new Date(astronomical_twilight_end),\n  };\n};\n\nexport const getSunsetData = async (\n  position: Position\n): Promise<SunsetData> => {\n  const latitude = position?.coords.latitude;\n  const longitude = position?.coords.longitude;\n\n  if (!latitude || !longitude) {\n    throw new Error(\"Coordinates is not specified.\");\n  }\n\n  const response = await fetch(\n    `https://api.sunrise-sunset.org/json?formatted=0&lat=${latitude}&lng=${position?.coords.longitude}`\n  );\n  const sunsetResponse = (await response.json()) as SunsetResponse;\n\n  if (sunsetResponse.status !== \"OK\") {\n    throw new Error(\n      \"Error while getting data from api. Error: \" + sunsetResponse.status\n    );\n  }\n\n  return mapResponseData(sunsetResponse.results);\n};\n","import { useEffect, useState } from \"react\";\nimport { getSunsetData } from \"./api\";\nimport { SunsetData } from \"./types\";\nimport usePosition from \"./usePosition\";\n\nexport default function useSunsetData(): [\n  SunsetData | undefined,\n  boolean,\n  Position | undefined\n] {\n  const [data, setData] = useState<SunsetData>();\n  const [isFetched, setFetched] = useState(false);\n  const [position] = usePosition();\n\n  async function fetchSunTime(currentLocation: Position) {\n    try {\n      setFetched(true);\n\n      const sunsetData = await getSunsetData(currentLocation);\n\n      setData(sunsetData);\n    } finally {\n      setFetched(false);\n    }\n  }\n\n  useEffect(() => {\n    if (!position) {\n      return;\n    }\n    fetchSunTime(position);\n  }, [position]);\n\n  return [data, isFetched, position];\n}\n","import { useEffect, useState } from \"react\";\n\nexport default function usePosition() {\n  const [position, setPosition] = useState<Position>();\n  useEffect(() => {\n    const geo = navigator.geolocation;\n\n    geo.getCurrentPosition((currentLocation) => {\n      setPosition(currentLocation);\n    });\n  }, []);\n\n  return [position];\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { SunsetData } from \"./types\";\nimport useSunsetData from \"./useSunsetData\";\n\nfunction App() {\n  const [data, isFetched, position] = useSunsetData();\n\n  const renderData = (sunsetData: SunsetData) => {\n    const { sunrise, sunset } = sunsetData;\n\n    return (\n      <>\n        <p>\n          <span role=\"img\" aria-label=\"Sunrise\">\n            ðŸŒ„\n          </span>\n          Sunrise: {sunrise.toLocaleTimeString()}{\" \"}\n        </p>\n        <p>\n          <span role=\"img\" aria-label=\"Sunset\">\n            ðŸŒ‡\n          </span>\n          Sunset: {sunset.toLocaleTimeString()}{\" \"}\n        </p>\n      </>\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {!position && <p>Allow browser use Your location.</p>}\n        {isFetched && <p>fetching...</p>}\n        {data && renderData(data)}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}